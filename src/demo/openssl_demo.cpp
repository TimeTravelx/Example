/*** 
 * @Author: TimeTravel
 * @FilePath: /Example/src/demo/openssl_demo.cpp
 * @Date: 2021-01-11 08:48:52
 * @Description: openssl's use
 *      1. rsa 的读取
 *      2. pem\der 的转换
 *      特别留意一下 x509 这个文件,里面有很多可用的转换
 */


#include <stdio.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/x509.h>


static unsigned char gn[256] = {
    0x8a,0x53,0xd8,0xf1,0x0e,0xfe,0x9a,0xd9,
    0xaf,0xa9,0x98,0xf3,0xe9,0xb6,0x02,0x4d,
    0xec,0x86,0xdc,0xaa,0xe2,0xf7,0xc2,0x59,
    0xad,0xf8,0xba,0x69,0xa4,0x59,0xa7,0x7e,
    0x07,0x41,0x5d,0xe8,0x80,0x78,0x38,0x84,
    0x5e,0x25,0x11,0xf5,0xac,0x87,0x32,0x93,
    0x6f,0x6f,0x58,0x04,0x12,0x45,0x46,0x94,
    0xb3,0x4e,0xa2,0x5c,0xb2,0x82,0xb1,0x31,
    0x42,0x66,0x80,0x2e,0x0c,0xb9,0xeb,0xaa,
    0x5c,0x70,0xae,0xac,0x74,0xb6,0x39,0x7c,
    0x51,0xea,0x9d,0xbb,0xbe,0x5f,0x7a,0x6c,
    0xdc,0x20,0xce,0x0b,0x7a,0x55,0xf1,0x17,
    0xed,0xe4,0x1a,0xc8,0x75,0x42,0x1e,0x2a,
    0x11,0x22,0x20,0x17,0x81,0xf6,0xd6,0x12,
    0x6c,0x6a,0xdd,0x73,0xd8,0x59,0xfc,0x15,
    0xe2,0xb8,0x2c,0x6d,0x22,0xe1,0x99,0x29,
    0x7c,0xad,0x0c,0x13,0xd8,0x5f,0x96,0x3b,
    0x7f,0x6f,0x88,0x86,0x90,0x69,0xef,0xbf,
    0x30,0x7c,0xc1,0x0c,0xc2,0x3c,0xe3,0x72,
    0xc7,0xef,0x02,0xa5,0x61,0x60,0x06,0x18,
    0xf2,0xbf,0x26,0xce,0x5b,0xe4,0xf7,0x6e,
    0x32,0x1c,0x88,0xa8,0x05,0xfe,0x31,0xe1,
    0xe6,0xc4,0x7a,0x98,0x91,0xe3,0x94,0xd2,
    0xa9,0xe6,0x96,0xba,0xa1,0x4b,0x8b,0xa8,
    0x7a,0x0e,0x02,0x19,0x6d,0x5c,0x51,0x6e,
    0x0b,0x6c,0x9f,0x77,0x8b,0x78,0xd0,0xcd,
    0x13,0x51,0xa6,0xe2,0xda,0xf0,0x8b,0x74,
    0x98,0x3e,0xfb,0xba,0x07,0x48,0x2a,0x1a,
    0x42,0xf1,0x2f,0xf0,0x8b,0xb5,0x90,0x59,
    0x71,0x6c,0xa7,0x2e,0xec,0x45,0x70,0x5c,
    0xe7,0x75,0x66,0xf4,0x97,0xb8,0x91,0xbd,
    0x0e,0x88,0x3c,0x76,0x63,0x9c,0x77,0xf7 };
static unsigned char ge[3] = { 0x01, 0x00, 0x01 };
int pubpem2der(unsigned char* __n, unsigned char* __e, unsigned char** __out_der);




int main(int argc, char* argv[])
{
    // FILE *fp = fopen("./rsa_public_key.pem", "rb");
    // if (!fp) { printf("[openssl_demo][fopen failed.]\n"); return -1; }

    // RSA* rsa = RSA_new();
    // rsa = PEM_read_RSA_PUBKEY(fp, &rsa, NULL, NULL);
    // // Not "PEM_read_RSAPublicKey"
    // if (!rsa) { printf("[openssl_demo][PEM_read_RSAPublicKey failed.]\n"); return -1; }

    // FILE* fp_pub = fopen("./rsa_public_print", "w+");
    // RSA_print_fp(fp_pub, rsa, 0);
    // if (fp_pub) fclose(fp_pub);
    // const BIGNUM* n = RSA_get0_n(rsa);
    // const BIGNUM* e = RSA_get0_e(rsa);
    // if (!n) { printf("[openssl_demo][RSA_get0_n failed.]\n"); return -1; }
    // if (!e) { printf("[openssl_demo][RSA_get0_e failed.]\n"); return -1; }
    // unsigned char buf_n[256] = {0};
    // unsigned char buf_e[3] = {0};
    // printf("------- %d \n",     BN_num_bytes(RSA_get0_n(rsa)));
    // BN_bn2bin(n, buf_n);
    // for (int i=0; i<256; i++) {
    //     printf("%02x-", buf_n[i]);
    // }
    // printf("\n");
    // printf("------- %d \n",     BN_num_bytes(RSA_get0_e(rsa)));


    // BN_bn2bin(e, buf_e);
    // for (int i = 0; i < 3; i++) {
    //     printf("%02x-", buf_e[i]);
    // }
    // printf("\n");


    // // unsigned char buf[2] = {0x01, 0x02};
    // // BIGNUM* test = NULL;
    // // test = BN_bin2bn(buf, sizeof(buf), test);
    // // if (!test) {printf("[openssl_demo][BN_bin2bn failed.] return -1; \n"); };

    // // BN_bn2bin(pkey->pkey.rsa->n, rsa_key.modulus);
    
    // FILE *fp_pub_der = fopen("./rsa_public_key.der", "w+");
    // if (i2d_RSA_PUBKEY_fp(fp_pub_der, rsa) < 0) { printf("[openssl_demo][i2d_RSA_PUBKEY_fp failed.] return -1; \n"); }
    // // ASN1_i2d_fp
    // if (fp_pub_der) fclose(fp_pub_der);

    
    // if(fp) fclose(fp);
    unsigned char* out_der = NULL;
    int out_der_len = pubpem2der(gn, ge, &out_der);
    free(out_der);
    return 0;
}

/*** 
 * @description: 
 *      __out_der should be free by caller
 * @param __n[in]       
 * @param __e[in]
 * @param __out_der[out]
 * @return success return __out_der's len, otherwise return -1
 */
int pubpem2der(unsigned char* __n, unsigned char* __e, unsigned char** __out_der)
{
    if (!__n || !__e) return -1;

    BIGNUM* n = BN_new();
    BIGNUM* e = BN_new();
    if (!BN_bin2bn(__n, 256, n)) { printf("[openssl_demo][pubpem2der][N BN_bin2bn failed.]\n"); return -1; }
    if (!BN_bin2bn(__e, 3, e)) { printf("[openssl_demo][pubpem2der][E BN_bin2bn failed.]\n"); return -1; }
    RSA* rsa = RSA_new();
    if (RSA_set0_key(rsa, n, e, NULL) == 0) { printf("[openssl_demo][pubpem2der][RSA_set0_key failed.]\n"); return -1; }

    unsigned char * buff = NULL;
    // if (i2d_RSA_PUBKEY_fp(fp_pub_der, rsa) < 0) { printf("[openssl_demo][pubpem2der][i2d_RSA_PUBKEY_fp failed.] return -1; \n"); }
    // if (fp_pub_der) fclose(fp_pub_der);
    int __out_der_len = i2d_RSA_PUBKEY(rsa, __out_der);
    if (__out_der_len < 0) { printf("[openssl_demo][pubpem2der][i2d_RSA_PUBKEY failed.] return -1; \n"); }
    return __out_der_len;
}